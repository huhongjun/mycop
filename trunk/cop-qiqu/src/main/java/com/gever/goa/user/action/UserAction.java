package com.gever.goa.user.action;

import org.apache.struts.action.*;
import com.gever.goa.base.*;
import com.gever.vo.*;
import com.gever.exception.DefaultException;
import javax.servlet.http.HttpServletRequest;
import com.gever.util.StringUtils;

import com.gever.goa.user.dao.*;
import com.gever.goa.user.dao.impl.*;
import com.gever.goa.user.vo.UserVO;
import com.gever.goa.user.dao.UserFactory;

/**
 * Comment block is generated by javaClassComment.vsl
 *
 * <p>Title: </p>
 * <p>Description: TUser ??</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company:${config.company}</p>
 * @Author:		${config.author}
 * @Version:${config.version}
 *
 */
public class UserAction extends BaseAction {
    UserDao myDao = null;
    public UserAction() {}

    /**
     * 数据初始化方法，由父类调用，必须覆盖父类方法
     * 通过GoaActionConfig设置DAO、设置VO
     * 
     * 
     * @param cfg GoaActionConfig
     * @return void
     * @throws DefaultException
     */
    protected void initData(GoaActionConfig cfg) throws DefaultException,
        Exception {

	        //设置VO
        UserForm myForm = (UserForm) cfg.getBaseForm(); 
        if (myForm.getVo() == null){
            myForm.setVo(new UserVO());
        }

	        //得到相应DAO的实例并设置超类中的DAO
        myDao = UserFactory.getInstance().createUserDAO(super.dbData);
        cfg.setBaseDao( (BaseDAO) myDao);
        //toEdit/toView方法中如何获得VO对象
        //false - BaseDAO.queryByPk2(VOInterface)
        //true  - BaseDAO.queryByPk(VOInterface)
	        //super.setVoSql(false);
    }

    /**
     * 到清单页面,通常操作的对象有：myForm、myDao，重点是子类的扩展
     * 如：根据form数据组织where条件
     * @param cfg GoaActionConfig
     * @return String forward地址
     * @throws DefaultException
     */

    protected String toList(GoaActionConfig cfg) throws DefaultException,
        Exception {
       HttpServletRequest request =  cfg.getRequest();
       String nodeid = StringUtils.nullToString(request.getParameter("nodeid"));
       if (!"".equals(nodeid)) {		                 //有xmlTree传入参数时
           cfg.getBaseForm().setSqlWhere(" and 1 = '" + nodeid + "'");
       } else {
           cfg.getBaseForm().setSqlWhere("");    //没有xmlTree传入参数时
       }
       
       return super.toList(cfg);
       //return this.FORWORD_LIST_PAGE;
    }

    /**
     * 获取tree的数据
     * @param cfg 当前Action相关配置类
     * @return forward地址
     * @throws DefaultException
     * @throws Exception
     */
    public String doTreeData(GoaActionConfig cfg) throws DefaultException,
        Exception{
        String nodeid = StringUtils.nullToString(cfg.getRequest().getParameter("nodeid"));

	        //获取nodeid的子节点数据
        cfg.getRequest().setAttribute("treeData", myDao.getTreeData(nodeid));
        return TREE_PAGE;
    }
}